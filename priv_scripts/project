#! /usr/bin/env zsh

# Use Zsh globbing to expand directories
folder_list=(
  $HOME/dev/elixir/*(/) #  Only match directories
  $HOME/dev/ash/*(/) #  Only match directories
  $HOME/dev/nvim/*(/) 
  $HOME/dev/alembic/*(/)
  $HOME/dev/repros/*(/)
)

# Explicitly named folders
explicit_folders=(
  $HOME/.dotfiles
  $HOME/dev/overlays
)

# Combine all folders into one array
all_folders=($folder_list $explicit_folders)

# Verify folders exist
valid_folders=()
for folder in $all_folders; do
  if [[ -d $folder ]]; then
    valid_folders+=($folder)
  fi
done

# Use fzf to select a directory
selected_dir=$(printf '%s\n' "${valid_folders[@]}" | fzf --prompt="Select a folder: ")

# Check if a selection was made
if [[ -n $selected_dir ]]; then
  # Get the Kitty window information
  kitty_info=$(kitty @ ls)

  # Extract the current window title using jq
  current_title=$(kitty @ ls | jq -r '
    [.[] | select(.is_focused == true)] | 
    first | 
    .tabs[0].windows[0].title // empty
  ')

  project_name="Project-$(echo "$selected_dir" | sed "s|$HOME/|~/|g")"

  current_window_id=$(kitty @ ls | jq '.[] | .tabs[] | .windows[] | select(.is_focused == true) | .id')

  here=false

  if [[ " $* " == *" --here "* ]]; then
    here=true
  fi

  if [[ $current_title != Project* || $here == "true" ]]; then
    matching_window_id=$(kitty @ ls | jq --arg title $project_name '.[] | .tabs[].windows[] | select(.title == $title).id') 
    if [[ -n "$matching_window_id" ]]; then
      kitty @ focus-window --match="id:$matching_window_id" 2> /dev/null
    else
      if [[ $1 == "hot-key" ]]; then
        kitten @ close-window --match "id:$2"
      fi

      kitten @ set-window-title "$project_name"
      cd "$selected_dir" > /dev/null
      nvim
      /opt/homebrew/bin/zsh
    fi
  else
    if [[ $current_title == "$project_name" ]]; then
      if [[ $1 == "hot-key" ]]; then
        kitten @ close-window --match "id:$current_window_id"
      else
        cd "$selected_dir" > /dev/null
        nvim
      fi
    else
      if [[ $1 == "hot-key" ]]; then
        # No idea why I have to do this, but specifying the window id *does not work* ðŸ˜­
        kitten @ set-user-vars TO_CLOSE=true
      fi
      # Run the kitty command with --match to switch to a matching window
      matching_window_id=$(kitty @ ls | jq --arg title $project_name '.[] | .tabs[].windows[] | select(.title == $title).id') 
      if [[ -n "$matching_window_id" ]]; then
        kitty @ focus-window --match="id:$matching_window_id" 2> /dev/null
      else
        kitten @ set-user-vars TO_CLOSE=true
        kitty @ launch \
          --title="${project_name}" \
          --type os-window \
          --cwd "$selected_dir" \
          --hold \
          /opt/homebrew/bin/zsh -c "/opt/homebrew/bin/nvim"

      fi
    fi
  fi
else
  kitten @ set-user-vars TO_CLOSE=true
fi

kitten @ close-window --match var:TO_CLOSE=true > /dev/null 2>&1

exit 0

